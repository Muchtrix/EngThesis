{
    "Variables": [
        "_G",
        "_VERSION",
        "package.config",
        "package.cpath",
        "package.loaded",
        "package.path",
        "package.preload",
        "package.searchers",
        "utf8.charpattern",
        "math.huge",
        "math.maxinteger",
        "math.mininteger",
        "math.pi"
    ],
    "Functions": [
        {"label": "assert(v, message)", "snippet": "assert(${1:v}, ${2:message})"},
        {"label": "collectgarbage(opt, arg)", "snippet": "collectgarbage(${1:opt}, ${2:arg})"},
        {"label": "dofile(filename)", "snippet": "dofile(${1:filename})"},
        {"label": "error(message, level)", "snippet": "error(${1:message}, ${2:level})"},
        {"label": "getmetatable(object)", "snippet": "getmetatable(${1:object})"},
        {"label": "ipairs(t)", "snippet": "ipairs(${1:t})"},
        {"label": "loadfile(filename, mode, env)", "snippet": "loadfile(${1:filename}, ${2:mode}, ${3:env})"},
        {"label": "next(table, index)", "snippet": "next(${1:table}, ${2:index})"},
        {"label": "pairs(t)", "snippet": "pairs(${1:t})"},
        {"label": "print(···)", "snippet": "print(${1:···})"},
        {"label": "rawequal(v1, v2)", "snippet": "rawequal(${1:v1}, ${2:v2})"},
        {"label": "rawget(table, index)", "snippet": "rawget(${1:table}, ${2:index})"},
        {"label": "rawlen(v)", "snippet": "rawlen(${1:v})"},
        {"label": "rawset(table, index, value)", "snippet": "rawset(${1:table}, ${2:index}, ${3:value})"},
        {"label": "select(index, ···)", "snippet": "select(${1:index}, ${2:···})"},
        {"label": "setmetatable(table, metatable)", "snippet": "setmetatable(${1:table}, ${2:metatable})"},
        {"label": "tonumber(e, base)", "snippet": "tonumber(${1:e}, ${2:base})"},
        {"label": "tostring(v)", "snippet": "tostring(${1:v})"},
        {"label": "type(v)", "snippet": "type(${1:v})"},
        {"label": "xpcall(f, msgh, arg1, ···)", "snippet": "xpcall(${1:f}, ${2:msgh}, ${3:arg1}, ${4:···})"},
        {"label": "coroutine.create(f)", "snippet": "coroutine.create(${1:f})"},
        {"label": "coroutine.isyieldable()", "snippet": "coroutine.isyieldable()"},
        {"label": "coroutine.resume(co, val1, ···)", "snippet": "coroutine.resume(${1:co}, ${2:val1}, ${3:···})"},
        {"label": "coroutine.running()", "snippet": "coroutine.running()"},
        {"label": "coroutine.status(co)", "snippet": "coroutine.status(${1:co})"},
        {"label": "coroutine.wrap(f)", "snippet": "coroutine.wrap(${1:f})"},
        {"label": "coroutine.yield(···)", "snippet": "coroutine.yield(${1:···})"},
        {"label": "require(modname)", "snippet": "require(${1:modname})"},
        {"label": "package.loadlib(libname, funcname)", "snippet": "package.loadlib(${1:libname}, ${2:funcname})"},
        {"label": "string.char(···)", "snippet": "string.char(${1:···})"},
        {"label": "string.dump(function, strip)", "snippet": "string.dump(${1:function}, ${2:strip})"},
        {"label": "string.find(s, pattern, init, plain)", "snippet": "string.find(${1:s}, ${2:pattern}, ${3:init}, ${4:plain})"},
        {"label": "string.format(formatstring, ···)", "snippet": "string.format(${1:formatstring}, ${2:···})"},
        {"label": "string.lower(s)", "snippet": "string.lower(${1:s})"},
        {"label": "string.match(s, pattern, init)", "snippet": "string.match(${1:s}, ${2:pattern}, ${3:init})"},
        {"label": "string.pack(fmt, v1, v2, ···)", "snippet": "string.pack(${1:fmt}, ${2:v1}, ${3:v2}, ${4:···})"},
        {"label": "string.packsize(fmt)", "snippet": "string.packsize(${1:fmt})"},
        {"label": "string.rep(s, n, sep)", "snippet": "string.rep(${1:s}, ${2:n}, ${3:sep})"},
        {"label": "string.reverse(s)", "snippet": "string.reverse(${1:s})"},
        {"label": "string.sub(s, i, j)", "snippet": "string.sub(${1:s}, ${2:i}, ${3:j})"},
        {"label": "string.unpack(fmt, s, pos)", "snippet": "string.unpack(${1:fmt}, ${2:s}, ${3:pos})"},
        {"label": "string.upper(s)", "snippet": "string.upper(${1:s})"},
        {"label": "utf8.char(···)", "snippet": "utf8.char(${1:···})"},
        {"label": "utf8.codes(s)", "snippet": "utf8.codes(${1:s})"},
        {"label": "math.log(x, base)", "snippet": "math.log(${1:x}, ${2:base})"},
        {"label": "math.max(x, ···)", "snippet": "math.max(${1:x}, ${2:···})"},
        {"label": "math.min(x, ···)", "snippet": "math.min(${1:x}, ${2:···})"},
        {"label": "math.modf(x)", "snippet": "math.modf(${1:x})"},
        {"label": "math.rad(x)", "snippet": "math.rad(${1:x})"},
        {"label": "math.random(m, n)", "snippet": "math.random(${1:m}, ${2:n})"},
        {"label": "math.randomseed(x)", "snippet": "math.randomseed(${1:x})"},
        {"label": "math.sin(x)", "snippet": "math.sin(${1:x})"},
        {"label": "math.sqrt(x)", "snippet": "math.sqrt(${1:x})"},
        {"label": "math.tan(x)", "snippet": "math.tan(${1:x})"},
        {"label": "math.tointeger(x)", "snippet": "math.tointeger(${1:x})"},
        {"label": "math.type(x)", "snippet": "math.type(${1:x})"},
        {"label": "math.ult(m, n)", "snippet": "math.ult(${1:m}, ${2:n})"},
        {"label": "io.close(file)", "snippet": "io.close(${1:file})"},
        {"label": "io.flush()", "snippet": "io.flush()"},
        {"label": "io.input(file)", "snippet": "io.input(${1:file})"},
        {"label": "io.lines(filename, ···)", "snippet": "io.lines(${1:filename}, ${2:···})"},
        {"label": "io.open(filename, mode)", "snippet": "io.open(${1:filename}, ${2:mode})"},
        {"label": "io.output(file)", "snippet": "io.output(${1:file})"},
        {"label": "io.popen(prog, mode)", "snippet": "io.popen(${1:prog}, ${2:mode})"},
        {"label": "io.read(···)", "snippet": "io.read(${1:···})"},
        {"label": "io.tmpfile()", "snippet": "io.tmpfile()"},
        {"label": "io.type(obj)", "snippet": "io.type(${1:obj})"},
        {"label": "io.write(···)", "snippet": "io.write(${1:···})"},
        {"label": "file:close()", "snippet": "file:close()"},
        {"label": "file:flush()", "snippet": "file:flush()"},
        {"label": "file:lines(···)", "snippet": "file:lines(${1:···})"},
        {"label": "file:seek(whence, offset)", "snippet": "file:seek(${1:whence}, ${2:offset})"},
        {"label": "file:setvbuf(mode, size)", "snippet": "file:setvbuf(${1:mode}, ${2:size})"},
        {"label": "file:write(···)", "snippet": "file:write(${1:···})"},
        {"label": "os.clock()", "snippet": "os.clock()"},
        {"label": "os.date(format, time)", "snippet": "os.date(${1:format}, ${2:time})"},
        {"label": "os.difftime(t2, t1)", "snippet": "os.difftime(${1:t2}, ${2:t1})"},
        {"label": "os.execute(command)", "snippet": "os.execute(${1:command})"},
        {"label": "os.exit(code, close)", "snippet": "os.exit(${1:code}, ${2:close})"},
        {"label": "os.getenv(varname)", "snippet": "os.getenv(${1:varname})"},
        {"label": "os.remove(filename)", "snippet": "os.remove(${1:filename})"},
        {"label": "os.rename(oldname, newname)", "snippet": "os.rename(${1:oldname}, ${2:newname})"},
        {"label": "os.setlocale(locale, category)", "snippet": "os.setlocale(${1:locale}, ${2:category})"},
        {"label": "os.time(table)", "snippet": "os.time(${1:table})"},
        {"label": "os.tmpname()", "snippet": "os.tmpname()"},
        {"label": "debug.debug()", "snippet": "debug.debug()"},
        {"label": "debug.gethook(thread)", "snippet": "debug.gethook(${1:thread})"},
        {"label": "debug.getinfo(thread, f, what)", "snippet": "debug.getinfo(${1:thread}, ${2:f}, ${3:what})"},
        {"label": "debug.getlocal(thread, f, local)", "snippet": "debug.getlocal(${1:thread}, ${2:f}, ${3:local})"},
        {"label": "debug.getmetatable(value)", "snippet": "debug.getmetatable(${1:value})"},
        {"label": "debug.getregistry()", "snippet": "debug.getregistry()"},
        {"label": "debug.getupvalue(f, up)", "snippet": "debug.getupvalue(${1:f}, ${2:up})"},
        {"label": "debug.getuservalue(u)", "snippet": "debug.getuservalue(${1:u})"},
        {"label": "debug.sethook(thread, hook, mask, count)", "snippet": "debug.sethook(${1:thread}, ${2:hook}, ${3:mask}, ${4:count})"},
        {"label": "debug.setlocal(thread, level, local, value)", "snippet": "debug.setlocal(${1:thread}, ${2:level}, ${3:local}, ${4:value})"},
        {"label": "debug.setmetatable(value, table)", "snippet": "debug.setmetatable(${1:value}, ${2:table})"},
        {"label": "debug.setupvalue(f, up, value)", "snippet": "debug.setupvalue(${1:f}, ${2:up}, ${3:value})"},
        {"label": "debug.setuservalue(udata, value)", "snippet": "debug.setuservalue(${1:udata}, ${2:value})"},
        {"label": "debug.traceback(thread, message, level)", "snippet": "debug.traceback(${1:thread}, ${2:message}, ${3:level})"},
        {"label": "debug.upvalueid(f, n)", "snippet": "debug.upvalueid(${1:f}, ${2:n})"},
        {"label": "debug.upvaluejoin(f1, n1, f2, n2)", "snippet": "debug.upvaluejoin(${1:f1}, ${2:n1}, ${3:f2}, ${4:n2})"}
    ]
}