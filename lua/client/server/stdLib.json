{
    "Variables": [
        "_G",
        "_VERSION",
        "package.config",
        "package.cpath",
        "package.loaded",
        "package.path",
        "package.preload",
        "package.searchers",
        "utf8.charpattern",
        "math.huge",
        "math.maxinteger",
        "math.mininteger",
        "math.pi"
    ],
    "Functions": [
        "assert(v [, message])",
        "collectgarbage([opt [, arg]])",
        "dofile([filename])",
        "error(message [, level])",
        "getmetatable(object)",
        "ipairs(t)",
        "loadfile([filename [, mode [, env]]])",
        "next(table [, index])",
        "pairs(t)",
        "print(···)",
        "rawequal(v1, v2)",
        "rawget(table, index)",
        "rawlen(v)",
        "rawset(table, index, value)",
        "select(index, ···)",
        "setmetatable(table, metatable)",
        "tonumber(e [, base])",
        "tostring(v)",
        "type(v)",
        "xpcall(f, msgh [, arg1, ···])",
        "coroutine.create(f)",
        "coroutine.isyieldable()",
        "coroutine.resume(co [, val1, ···])",
        "coroutine.running()",
        "coroutine.status(co)",
        "coroutine.wrap(f)",
        "coroutine.yield(···)",
        "require(modname)",
        "package.loadlib(libname, funcname)",
        "string.char(···)",
        "string.dump(function [, strip])",
        "string.find(s, pattern [, init [, plain]])",
        "string.format(formatstring, ···)",
        "string.lower(s)",
        "string.match(s, pattern [, init])",
        "string.pack(fmt, v1, v2, ···)",
        "string.packsize(fmt)",
        "string.rep(s, n [, sep])",
        "string.reverse(s)",
        "string.sub(s, i [, j])",
        "string.unpack(fmt, s [, pos])",
        "string.upper(s)",
        "utf8.char(···)",
        "utf8.codes(s)",
        "math.log(x [, base])",
        "math.max(x, ···)",
        "math.min(x, ···)",
        "math.modf(x)",
        "math.rad(x)",
        "math.random([m [, n]])",
        "math.randomseed(x)",
        "math.sin(x)",
        "math.sqrt(x)",
        "math.tan(x)",
        "math.tointeger(x)",
        "math.type(x)",
        "math.ult(m, n)",
        "io.close([file])",
        "io.flush()",
        "io.input([file])",
        "io.lines([filename, ···])",
        "io.open(filename [, mode])",
        "io.output([file])",
        "io.popen(prog [, mode])",
        "io.read(···)",
        "io.tmpfile()",
        "io.type(obj)",
        "io.write(···)",
        "file:close()",
        "file:flush()",
        "file:lines(···)",
        "file:seek([whence [, offset]])",
        "file:setvbuf(mode [, size])",
        "file:write(···)",
        "os.clock()",
        "os.date([format [, time]])",
        "os.difftime(t2, t1)",
        "os.execute([command])",
        "os.exit([code [, close]])",
        "os.getenv(varname)",
        "os.remove(filename)",
        "os.rename(oldname, newname)",
        "os.setlocale(locale [, category])",
        "os.time([table])",
        "os.tmpname()",
        "debug.debug()",
        "debug.gethook([thread])",
        "debug.getinfo([thread,] f [, what])",
        "debug.getlocal([thread,] f, local)",
        "debug.getmetatable(value)",
        "debug.getregistry()",
        "debug.getupvalue(f, up)",
        "debug.getuservalue(u)",
        "debug.sethook([thread,] hook, mask [, count])",
        "debug.setlocal([thread,] level, local, value)",
        "debug.setmetatable(value, table)",
        "debug.setupvalue(f, up, value)",
        "debug.setuservalue(udata, value)",
        "debug.traceback([thread,] [message [, level]])",
        "debug.upvalueid(f, n)",
        "debug.upvaluejoin(f1, n1, f2, n2)"
    ]
}