{
    "Variables": [
        "_G",
        "_VERSION",
        "package.config",
        "package.cpath",
        "package.loaded",
        "package.path",
        "package.preload",
        "package.searchers",
        "utf8.charpattern",
        "math.huge",
        "math.maxinteger",
        "math.mininteger",
        "math.pi"
    ],
    "Functions": [
        "assert(${1:v}, ${2:message})",
        "collectgarbage(${1:opt}, ${2:arg})",
        "dofile(${1:filename})",
        "error(${1:message}, ${2:level})",
        "getmetatable(${1:object})",
        "ipairs(${1:t})",
        "loadfile(${1:filename}, ${2:mode}, ${3:env})",
        "next(${1:table}, ${2:index})",
        "pairs(${1:t})",
        "print(${1:···})",
        "rawequal(${1:v1}, ${2:v2})",
        "rawget(${1:table}, ${2:index})",
        "rawlen(${1:v})",
        "rawset(${1:table}, ${2:index}, ${3:value})",
        "select(${1:index}, ${2:···})",
        "setmetatable(${1:table}, ${2:metatable})",
        "tonumber(${1:e}, ${2:base})",
        "tostring(${1:v})",
        "type(${1:v})",
        "xpcall(${1:f}, ${2:msgh}, ${3:arg1}, ${4:···})",
        "coroutine.create(${1:f})",
        "coroutine.isyieldable()",
        "coroutine.resume(${1:co}, ${2:val1}, ${3:···})",
        "coroutine.running()",
        "coroutine.status(${1:co})",
        "coroutine.wrap(${1:f})",
        "coroutine.yield(${1:···})",
        "require(${1:modname})",
        "package.loadlib(${1:libname}, ${2:funcname})",
        "string.char(${1:···})",
        "string.dump(${1:function}, ${2:strip})",
        "string.find(${1:s}, ${2:pattern}, ${3:init}, ${4:plain})",
        "string.format(${1:formatstring}, ${2:···})",
        "string.lower(${1:s})",
        "string.match(${1:s}, ${2:pattern}, ${3:init})",
        "string.pack(${1:fmt}, ${2:v1}, ${3:v2}, ${4:···})",
        "string.packsize(${1:fmt})",
        "string.rep(${1:s}, ${2:n}, ${3:sep})",
        "string.reverse(${1:s})",
        "string.sub(${1:s}, ${2:i}, ${3:j})",
        "string.unpack(${1:fmt}, ${2:s}, ${3:pos})",
        "string.upper(${1:s})",
        "utf8.char(${1:···})",
        "utf8.codes(${1:s})",
        "math.log(${1:x}, ${2:base})",
        "math.max(${1:x}, ${2:···})",
        "math.min(${1:x}, ${2:···})",
        "math.modf(${1:x})",
        "math.rad(${1:x})",
        "math.random(${1:m}, ${2:n})",
        "math.randomseed(${1:x})",
        "math.sin(${1:x})",
        "math.sqrt(${1:x})",
        "math.tan(${1:x})",
        "math.tointeger(${1:x})",
        "math.type(${1:x})",
        "math.ult(${1:m}, ${2:n})",
        "io.close(${1:file})",
        "io.flush()",
        "io.input(${1:file})",
        "io.lines(${1:filename}, ${2:···})",
        "io.open(${1:filename}, ${2:mode})",
        "io.output(${1:file})",
        "io.popen(${1:prog}, ${2:mode})",
        "io.read(${1:···})",
        "io.tmpfile()",
        "io.type(${1:obj})",
        "io.write(${1:···})",
        "file:close()",
        "file:flush()",
        "file:lines(${1:···})",
        "file:seek(${1:whence}, ${2:offset})",
        "file:setvbuf(${1:mode}, ${2:size})",
        "file:write(${1:···})",
        "os.clock()",
        "os.date(${1:format}, ${2:time})",
        "os.difftime(${1:t2}, ${2:t1})",
        "os.execute(${1:command})",
        "os.exit(${1:code}, ${2:close})",
        "os.getenv(${1:varname})",
        "os.remove(${1:filename})",
        "os.rename(${1:oldname}, ${2:newname})",
        "os.setlocale(${1:locale}, ${2:category})",
        "os.time(${1:table})",
        "os.tmpname()",
        "debug.debug()",
        "debug.gethook(${1:thread})",
        "debug.getinfo(${1:thread}, ${2:f}, ${3:what})",
        "debug.getlocal(${1:thread}, ${2:f}, ${3:local})",
        "debug.getmetatable(${1:value})",
        "debug.getregistry()",
        "debug.getupvalue(${1:f}, ${2:up})",
        "debug.getuservalue(${1:u})",
        "debug.sethook(${1:thread}, ${2:hook}, ${3:mask}, ${4:count})",
        "debug.setlocal(${1:thread}, ${2:level}, ${3:local}, ${4:value})",
        "debug.setmetatable(${1:value}, ${2:table})",
        "debug.setupvalue(${1:f}, ${2:up}, ${3:value})",
        "debug.setuservalue(${1:udata}, ${2:value})",
        "debug.traceback(${1:thread}, ${2:message}, ${3:level})",
        "debug.upvalueid(${1:f}, ${2:n})",
        "debug.upvaluejoin(${1:f1}, ${2:n1}, ${3:f2}, ${4:n2})"
    ]
}